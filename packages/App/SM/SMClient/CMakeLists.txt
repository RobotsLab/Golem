###############################################################################
#
# Golem App/SM/SMClient application
#
###############################################################################

option(GOLEM_BUILD_APP_SM_STANDALONE "Build Golem-independent SMClient" YES)
mark_as_advanced(GOLEM_BUILD_APP_SM_STANDALONE)

if(GOLEM_BUILD_APP_SM)
	SET(PACKAGE_DIR "${PACKAGE_APP_SM}/SMClient")

	if(GOLEM_BUILD_APP_SM_STANDALONE)
		# Boost
		if (WIN32)
			ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB)
			SET(Boost_USE_STATIC_LIBS ON)
			SET(Boost_ALL_DYN_LINK OFF)
		elseif (UNIX)
			#ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB)
			#SET(Boost_USE_STATIC_LIBS OFF)
			#SET(Boost_ALL_DYN_LINK ON)
		endif ()
		FIND_PACKAGE(Boost COMPONENTS system thread regex)

		SET(PACKAGE_SOURCES
			${PACKAGE_DIR}/src/SMClient.cpp
			${GOLEM_PROJECT_PACKAGES}/Tools/SM/src/SM.cpp
		)
		SET(PACKAGE_HEADERS
			${GOLEM_PROJECT_PACKAGES}/Tools/SM/include/Golem/SM/SM.h
			${GOLEM_PROJECT_PACKAGES}/Core/Defs/include/Golem/Defs/System.h
		)
		SET(PACKAGE_FILES
		)

		ADD_EXECUTABLE(GolemSMClient ${PACKAGE_SOURCES} ${PACKAGE_HEADERS} ${PACKAGE_FILES})

		# Windows 32/64 bit
		if (WIN32)
			TARGET_COMPILE_OPTIONS(GolemSMClient PUBLIC /wd4005)
			TARGET_LINK_LIBRARIES(GolemSMClient WinMM ${Boost_LIBRARIES})
		# Unix Linux/Apple
		elseif (UNIX)
			TARGET_LINK_LIBRARIES(GolemSMClient ${Boost_LIBRARIES})
		endif ()

		TARGET_INCLUDE_DIRECTORIES(GolemSMClient PUBLIC ${PACKAGE_DIR}/include ${GOLEM_PROJECT_PACKAGES}/Tools/SM/include ${GOLEM_PROJECT_PACKAGES}/Core/Defs/include ${Boost_INCLUDE_DIRS})

		TARGET_COMPILE_OPTIONS(GolemSMClient PUBLIC ${CMAKE_DLL_EXPORT_FLAGS} -D_GOLEM_BUILD_APP_SM_STANDALONE)
	else(GOLEM_BUILD_APP_SM_STANDALONE)
		FILE(GLOB_RECURSE PACKAGE_SOURCES "${PACKAGE_DIR}/src/*.cpp")
		FILE(GLOB_RECURSE PACKAGE_HEADERS "${PACKAGE_DIR}/include/*.h")
		FILE(GLOB_RECURSE PACKAGE_FILES "${PACKAGE_DIR}/resources/*.xml")

		ADD_EXECUTABLE(GolemSMClient ${PACKAGE_SOURCES} ${PACKAGE_HEADERS} ${PACKAGE_FILES})
		TARGET_LINK_LIBRARIES(GolemSMClient GolemSys GolemMath GolemSM)
		TARGET_INCLUDE_DIRECTORIES(GolemSMClient PUBLIC ${PACKAGE_DIR}/include)

		TARGET_COMPILE_OPTIONS(GolemSMClient PUBLIC ${CMAKE_DLL_EXPORT_FLAGS})
	endif(GOLEM_BUILD_APP_SM_STANDALONE)

	COPY_FILES(GolemSMClient ${RUNTIME_OUTPUT_DIRECTORY} ${PACKAGE_FILES})
	SET_PROPERTY(TARGET GolemSMClient PROPERTY RELEASE_POSTFIX ${CMAKE_RELEASE_POSTFIX})
	SET_PROPERTY(TARGET GolemSMClient PROPERTY DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
	
	if (CPACK_BUILD_CORE)
		INSTALL(TARGETS GolemSMClient RUNTIME DESTINATION bin COMPONENT app_execs)
		INSTALL(FILES ${PACKAGE_HEADERS} DESTINATION include/Golem/App/SMClient/ COMPONENT app_headers)
		INSTALL(FILES ${PACKAGE_FILES} DESTINATION bin COMPONENT app_configs)
	endif (CPACK_BUILD_CORE)

	SET_PROPERTY(TARGET GolemSMClient PROPERTY PROJECT_LABEL "SMClient")
	SET_PROPERTY(TARGET GolemSMClient PROPERTY FOLDER "App/SM")
	SOURCE_GROUP("Include Files" FILES ${PACKAGE_HEADERS})
	SOURCE_GROUP("Resource Files" FILES ${PACKAGE_FILES})
endif(GOLEM_BUILD_APP_SM)
