# - Find PHYSX
# Find the native PHYSX headers and libraries.
#
#  PHYSX_INCLUDE_DIR -  where to find the include files of PhysX
#  PHYSX_LIBRARIES    - List of libraries when using PHYSX.
#  PHYSX_FOUND        - True if PHYSX found.

GET_FILENAME_COMPONENT(module_file_path ${CMAKE_CURRENT_LIST_FILE} PATH)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(LIB "lib64")
	SET(WIN "win64")
	IF(WIN32)
		SET(LIBEXT "64")
	ENDIF(WIN32)
else(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(LIB "lib32")
	SET(WIN "win32")
	SET(LIBEXT "")
endif(CMAKE_SIZEOF_VOID_P EQUAL 8)

SET(program_files_path "$ENV{PROGRAMFILES}")

IF(program_files_path)
	FILE(TO_CMAKE_PATH $ENV{PROGRAMFILES} program_files_path)
ENDIF(program_files_path)

# Look for the header file.
SET(PHYSX_INCLUDE_PATHS
	/usr/local/include
	$ENV{H3D_EXTERNAL_ROOT}/include
	$ENV{H3D_ROOT}/../External/include
	../External/include
	${module_file_path}/../../External/include
	${module_file_path}/../../../External/include
)

FIND_PATH(PHYSX_INCLUDE_PHYSICS NAMES NxPhysics.h PATHS ${PHYSX_INCLUDE_PATHS}
	/usr/include/PhysX/v2.8.3/SDKs/Physics/include
	"${program_files_path}/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Physics/include"
	"C:/Program Files (x86)/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Physics/include"
	"C:/Program Files/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Physics/include"
)
MARK_AS_ADVANCED(PHYSX_INCLUDE_PHYSICS)

FIND_PATH(PHYSX_INCLUDE_FOUNDATION NAMES NxFoundation.h PATHS ${PHYSX_INCLUDE_PATHS}
	/usr/include/PhysX/v2.8.3/SDKs/Foundation/include
	"${program_files_path}/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Foundation/include"
	"C:/Program Files (x86)/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Foundation/include"
	"C:/Program Files/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Foundation/include"
)
MARK_AS_ADVANCED(PHYSX_INCLUDE_FOUNDATION)

FIND_PATH(PHYSX_INCLUDE_PHYSXLOADER NAMES PhysXLoader.h PATHS ${PHYSX_INCLUDE_PATHS}
	/usr/include/PhysX/v2.8.3/SDKs/PhysXLoader/include
	"${program_files_path}/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/PhysXLoader/include"
	"C:/Program Files (x86)/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/PhysXLoader/include"
	"C:/Program Files/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/PhysXLoader/include"
)
MARK_AS_ADVANCED(PHYSX_INCLUDE_PHYSXLOADER)

FIND_PATH(PHYSX_INCLUDE_COOKING NAMES NxCooking.h PATHS ${PHYSX_INCLUDE_PATHS}
	/usr/include/PhysX/v2.8.3/SDKs/Cooking/include
	"${program_files_path}/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Cooking/include"
	"C:/Program Files (x86)/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Cooking/include"
	"C:/Program Files/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/Cooking/include"
)
MARK_AS_ADVANCED(PHYSX_INCLUDE_COOKING)

# Look for the library.
SET(PHYSX_LIBRARY_PATHS
	$ENV{H3D_EXTERNAL_ROOT}/${LIB}
	$ENV{H3D_ROOT}/../External/${LIB}
	../../External/${LIB}
	${module_file_path}/../../External/${LIB}
	${module_file_path}/../../../External/${LIB}
	/usr/lib/PhysX/v2.8.3
	"${program_files_path}/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/lib/${WIN}"
	"C:/Program Files (x86)/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/lib/${WIN}"
	"C:/Program Files/NVIDIA Corporation/NVIDIA PhysX SDK/v2.8.4_win/SDKs/lib/${WIN}"
)

FIND_LIBRARY(PHYSX_LIBRARY_NXCHARACTER NAMES NxCharacter${LIBEXT} PATHS ${PHYSX_LIBRARY_PATHS})
MARK_AS_ADVANCED(PHYSX_LIBRARY_NXCHARACTER)

FIND_LIBRARY(PHYSX_LIBRARY_NXCOOKING NAMES PhysXCooking${LIBEXT} NxCooking${LIBEXT} PATHS ${PHYSX_LIBRARY_PATHS})
MARK_AS_ADVANCED(PHYSX_LIBRARY_NXCOOKING)

FIND_LIBRARY(PHYSX_LIBRARY_PHYSXCORE NAMES PhysXCore${LIBEXT} PATHS ${PHYSX_LIBRARY_PATHS})
MARK_AS_ADVANCED(PHYSX_LIBRARY_PHYSXCORE)

FIND_LIBRARY(PHYSX_LIBRARY_PHYSXLOADER NAMES PhysXLoader${LIBEXT} PATHS ${PHYSX_LIBRARY_PATHS})
MARK_AS_ADVANCED(PHYSX_LIBRARY_PHYSXLOADER)


# Copy the results to the output variables.
IF(PHYSX_INCLUDE_COOKING AND PHYSX_INCLUDE_PHYSXLOADER AND PHYSX_INCLUDE_FOUNDATION AND PHYSX_INCLUDE_PHYSICS AND PHYSX_LIBRARY_NXCHARACTER AND PHYSX_LIBRARY_NXCOOKING AND PHYSX_LIBRARY_PHYSXCORE AND PHYSX_LIBRARY_PHYSXLOADER)
	SET(PHYSX_FOUND 1)
	SET(PHYSX_LIBRARIES ${PHYSX_LIBRARY_NXCHARACTER} ${PHYSX_LIBRARY_NXCOOKING} ${PHYSX_LIBRARY_PHYSXCORE} ${PHYSX_LIBRARY_PHYSXLOADER})
	SET(PHYSX_INCLUDE_DIR ${PHYSX_INCLUDE_PHYSICS} ${PHYSX_INCLUDE_FOUNDATION} ${PHYSX_INCLUDE_PHYSXLOADER} ${PHYSX_INCLUDE_COOKING})
ELSE(PHYSX_INCLUDE_COOKING AND PHYSX_INCLUDE_PHYSXLOADER AND PHYSX_INCLUDE_FOUNDATION AND PHYSX_INCLUDE_PHYSICS AND PHYSX_LIBRARY_NXCHARACTER AND PHYSX_LIBRARY_NXCOOKING AND PHYSX_LIBRARY_PHYSXCORE AND PHYSX_LIBRARY_PHYSXLOADER)
	SET(PHYSX_FOUND 0)
	SET(PHYSX_LIBRARIES)
	SET(PHYSX_INCLUDE_DIR)
ENDIF(PHYSX_INCLUDE_COOKING AND PHYSX_INCLUDE_PHYSXLOADER AND PHYSX_INCLUDE_FOUNDATION AND PHYSX_INCLUDE_PHYSICS AND PHYSX_LIBRARY_NXCHARACTER AND PHYSX_LIBRARY_NXCOOKING AND PHYSX_LIBRARY_PHYSXCORE AND PHYSX_LIBRARY_PHYSXLOADER)

# Report the results.
IF(NOT PHYSX_FOUND)
	SET(PHYSX_DIR_MESSAGE
		"PHYSX was not found. Make sure PHYSX_LIBRARIES and PHYSX_INCLUDE_DIR are set.")
	IF(PHYSX_FIND_REQUIRED)
		MESSAGE(FATAL_ERROR "${PHYSX_DIR_MESSAGE}")
	ELSEIF(NOT PHYSX_FIND_QUIETLY)
		MESSAGE(STATUS "${PHYSX_DIR_MESSAGE}")
	ENDIF(PHYSX_FIND_REQUIRED)
ENDIF(NOT PHYSX_FOUND)
